"use strict";
var observable_1 = require("data/observable");
var observable_array_1 = require("data/observable-array");
var firebase = require("nativescript-plugin-firebase");
var scrollViewModule = require("ui/scroll-view");
var Page = require("ui/frame");
var Dare_1 = require("../Class/Dare/Dare");
var self;
var MainModel = (function (_super) {
    __extends(MainModel, _super);
    function MainModel() {
        _super.call(this);
        this.Dares = new observable_array_1.ObservableArray();
        this.User = null;
        this.Score = 0;
        this.Image = "https://1.bp.blogspot.com/-YIfQT6q8ZM4/Vzyq5z1B8HI/AAAAAAAAAAc/UmWSSMLKtKgtH7CACElUp12zXkrPK5UoACLcB/s1600/image00.png";
        var scrollView = new scrollViewModule.ScrollView();
        //Vet ikke om denne fungerer
        firebase.keepInSync("/Dares", // which path in your Firebase needs to be kept in sync?
        true // set to false to disable this feature again
        ).then(function () {
            console.log("firebase.keepInSync is ON for /Dares");
        }, function (error) {
            console.log("firebase.keepInSync error: " + error);
        });
    }
    MainModel.prototype.GetDares = function () {
        var path;
        var onChildEvent = function (result) {
            if (result.type === "ChildRemoved") {
                self.DeleteDare(result.key);
            }
            if (result.type === "ChildAdded") {
                if (self.CheckIfDareAdded(result.key) == true) {
                    self.NewDare(result.key, result.value.Status, result.value.Dare, result.value.From);
                }
            }
        };
        // listen to changes in the /users path
        path = "/Dares/" + this.User;
        firebase.addChildEventListener(onChildEvent, path);
        path = "";
    };
    MainModel.prototype.GetScore = function () {
        var onChildEvent = function (result) {
            self.SetUIScore(result.value);
        };
        var path = "/Users/" + this.User + "/Score";
        firebase.addValueEventListener(onChildEvent, path);
    };
    MainModel.prototype.CheckIfDareAdded = function (id) {
        var AddDare = true;
        for (var i = 0; i < this.Dares.length; i++) {
            if (this.Dares.getItem(i).Id === id) {
                AddDare = false;
            }
        }
        return AddDare;
    };
    MainModel.prototype.DeleteDare = function (id) {
        this.SetScore();
        for (var i = 0; i < this.Dares.length; i++) {
            if (this.Dares.getItem(i).Id === id) {
                this.Dares.splice(i, 1);
                break;
            }
        }
    };
    MainModel.prototype.NewDare = function (id, StatusOnDare, nDare, From) {
        this.Dares.push(new Dare_1.default(id, StatusOnDare, nDare, From, this.User));
    };
    MainModel.prototype.SendDare = function () {
        Page.topmost().navigate({
            moduleName: "Page/SendTo/SendTo",
            context: { Username: this.User, Dare: this.InputDare
            },
            transition: {
                name: "slideBottom",
                duration: 380,
                curve: "easeIn"
            },
            animated: true
        });
    };
    MainModel.prototype.SetApplication = function (Username) {
        self = this;
        this.User = Username;
        this.set("GUIUser", this.User);
        this.GetDares();
        this.GetScore();
    };
    MainModel.prototype.SetUIScore = function (AScore) {
        this.set("Score", AScore);
    };
    MainModel.prototype.SetScore = function () {
        var adding = 10;
        var Result = this.Score;
        Result = Result + adding;
        firebase.update('/Users/' + this.User, { 'Score': Result });
    };
    MainModel.prototype.GoToFriendsPage = function () {
        Page.topmost().navigate({
            moduleName: "Page/FriendsPage/Friends",
            context: { Username: this.User
            },
            transition: {
                name: "slideBottom",
                duration: 380,
                curve: "easeIn"
            },
            animated: true
        });
    };
    MainModel.prototype.Logout = function () {
        this.User = "";
        this.set("Username", "");
        this.set("InputDare", "");
        while (this.Dares.length > 0) {
            this.Dares.pop();
        }
        firebase.logout();
        Page.topmost().goBack();
    };
    return MainModel;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MainModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi1QYWdlLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWFpbi1QYWdlLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyQkFBMEIsaUJBQWlCLENBQUMsQ0FBQTtBQUM1QyxpQ0FBZ0MsdUJBQXVCLENBQUMsQ0FBQTtBQUN4RCxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBRzFELElBQU8sZ0JBQWdCLFdBQVcsZ0JBQWdCLENBQUMsQ0FBQztBQUVwRCxJQUFPLElBQUksV0FBVyxVQUFVLENBQUMsQ0FBQztBQUNsQyxxQkFBaUIsb0JBQW9CLENBQUMsQ0FBQTtBQUVyQyxJQUFJLElBQUksQ0FBQztBQUNWO0lBQXdCLDZCQUFVO0lBUTlCO1FBRUksaUJBQU8sQ0FBQztRQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxrQ0FBZSxFQUFRLENBQUM7UUFDekMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLHdIQUF3SCxDQUFDO1FBQ3RJLElBQUksVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkQsNEJBQTRCO1FBQzFCLFFBQVEsQ0FBQyxVQUFVLENBQ2hCLFFBQVEsRUFBRSx3REFBd0Q7UUFDbEUsSUFBSSxDQUFNLDZDQUE2QztTQUN2RCxDQUFDLElBQUksQ0FDTjtZQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUN4RCxDQUFDLEVBQ0QsVUFBQyxLQUFLO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFRCw0QkFBUSxHQUFSO1FBRUksSUFBSSxJQUFZLENBQUM7UUFDakIsSUFBSSxZQUFZLEdBQUcsVUFBUyxNQUFVO1lBRWxDLEVBQUUsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUcsY0FBYyxDQUFDLENBQ2hDLENBQUM7Z0JBQ0csSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEMsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQ2pDLENBQUM7Z0JBRUcsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FDN0MsQ0FBQztvQkFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEYsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDLENBQUE7UUFDRyx1Q0FBdUM7UUFDdkMsSUFBSSxHQUFHLFNBQVMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzNCLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBQ0QsNEJBQVEsR0FBUjtRQUVJLElBQUksWUFBWSxHQUFHLFVBQVMsTUFBVTtZQUVsQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUE7UUFDRCxJQUFJLElBQUksR0FBRyxTQUFTLEdBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDMUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsb0NBQWdCLEdBQWhCLFVBQWlCLEVBQVM7UUFFdEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQ3BDLENBQUM7WUFDRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQ3BDLENBQUM7Z0JBQ0csT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNwQixDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELDhCQUFVLEdBQVYsVUFBVyxFQUFTO1FBRWhCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUNwQyxDQUFDO1lBQ0csRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUNwQyxDQUFDO2dCQUNHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsS0FBSyxDQUFDO1lBQ1YsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRUQsMkJBQU8sR0FBUCxVQUFRLEVBQVMsRUFBRSxZQUFvQixFQUFFLEtBQVksRUFBRSxJQUFXO1FBRTlELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksY0FBSSxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUMsS0FBSyxFQUFDLElBQUksRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsNEJBQVEsR0FBUjtRQUVJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQ3ZCO1lBQ0ksVUFBVSxFQUFFLG9CQUFvQjtZQUNoQyxPQUFPLEVBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsSUFBSSxDQUFDLFNBQVM7YUFDaEQ7WUFDRCxVQUFVLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLFFBQVEsRUFBRSxHQUFHO2dCQUNiLEtBQUssRUFBRSxRQUFRO2FBQ2xCO1lBQ0QsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FDQSxDQUFDO0lBQ04sQ0FBQztJQUVELGtDQUFjLEdBQWQsVUFBZSxRQUFlO1FBRTFCLElBQUksR0FBRyxJQUFJLENBQUM7UUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBR0QsOEJBQVUsR0FBVixVQUFXLE1BQWE7UUFFcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELDRCQUFRLEdBQVI7UUFFSSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUV4QixNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN6QixRQUFRLENBQUMsTUFBTSxDQUNYLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUNyQixFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUMsQ0FDcEIsQ0FBQztJQUNOLENBQUM7SUFFRCxtQ0FBZSxHQUFmO1FBRUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FDdkI7WUFDSSxVQUFVLEVBQUUsMEJBQTBCO1lBQ3JDLE9BQU8sRUFBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTthQUN4QjtZQUNMLFVBQVUsRUFBRTtnQkFDUixJQUFJLEVBQUUsYUFBYTtnQkFDbkIsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsS0FBSyxFQUFFLFFBQVE7YUFDakI7WUFDRixRQUFRLEVBQUUsSUFBSTtTQUNiLENBQ0EsQ0FBQztJQUNWLENBQUM7SUFFRCwwQkFBTSxHQUFOO1FBRUksSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixPQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDM0IsQ0FBQztZQUNHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDckIsQ0FBQztRQUVELFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVsQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVMLGdCQUFDO0FBQUQsQ0FBQyxBQTFLRCxDQUF3Qix1QkFBVSxHQTBLakM7QUFFRDtrQkFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7IE9ic2VydmFibGUgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGVBcnJheSB9IGZyb20gXCJkYXRhL29ic2VydmFibGUtYXJyYXlcIjtcclxuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XHJcbmltcG9ydCBsaXN0UGlja2VyTW9kdWxlID0gcmVxdWlyZShcInVpL2xpc3QtcGlja2VyXCIpO1xyXG5pbXBvcnQge0V2ZW50RGF0YX0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgc2Nyb2xsVmlld01vZHVsZSA9IHJlcXVpcmUoXCJ1aS9zY3JvbGwtdmlld1wiKTtcclxuXHJcbmltcG9ydCBQYWdlID0gcmVxdWlyZShcInVpL2ZyYW1lXCIpO1xyXG5pbXBvcnQgRGFyZSBmcm9tIFwiLi4vQ2xhc3MvRGFyZS9EYXJlXCI7XHJcblxyXG4gdmFyIHNlbGY7XHJcbmNsYXNzIE1haW5Nb2RlbCBleHRlbmRzIE9ic2VydmFibGV7XHJcbiAgICBEYXJlczogT2JzZXJ2YWJsZUFycmF5PERhcmU+O1xyXG4gICAgVXNlcjogc3RyaW5nO1xyXG4gICAgVXNlcm5hbWU6IHN0cmluZztcclxuICAgIElucHV0RGFyZTogc3RyaW5nO1xyXG4gICAgU2NvcmU6IG51bWJlcjtcclxuICAgIEltYWdlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5EYXJlcyA9IG5ldyBPYnNlcnZhYmxlQXJyYXk8RGFyZT4oKTtcclxuICAgICAgICB0aGlzLlVzZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuU2NvcmUgPSAwO1xyXG4gICAgICAgIHRoaXMuSW1hZ2UgPSBcImh0dHBzOi8vMS5icC5ibG9nc3BvdC5jb20vLVlJZlFUNnE4Wk00L1Z6eXE1ejFCOEhJL0FBQUFBQUFBQUFjL1VtV1NTTUxLdEtndEg3Q0FDRWxVcDEyelhrclBLNVVvQUNMY0IvczE2MDAvaW1hZ2UwMC5wbmdcIjtcclxuICAgICAgICB2YXIgc2Nyb2xsVmlldyA9IG5ldyBzY3JvbGxWaWV3TW9kdWxlLlNjcm9sbFZpZXcoKTtcclxuICAgICAgICAvL1ZldCBpa2tlIG9tIGRlbm5lIGZ1bmdlcmVyXHJcbiAgICAgICAgICBmaXJlYmFzZS5rZWVwSW5TeW5jKFxyXG4gICAgICAgICAgICAgXCIvRGFyZXNcIiwgLy8gd2hpY2ggcGF0aCBpbiB5b3VyIEZpcmViYXNlIG5lZWRzIHRvIGJlIGtlcHQgaW4gc3luYz9cclxuICAgICAgICAgICAgIHRydWUgICAgICAvLyBzZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzIGZlYXR1cmUgYWdhaW5cclxuICAgICAgICAgICAgKS50aGVuKFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpcmViYXNlLmtlZXBJblN5bmMgaXMgT04gZm9yIC9EYXJlc1wiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmlyZWJhc2Uua2VlcEluU3luYyBlcnJvcjogXCIgKyBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIEdldERhcmVzKClcclxuICAgIHtcclxuICAgICAgICBsZXQgcGF0aDogc3RyaW5nO1xyXG4gICAgICAgIHZhciBvbkNoaWxkRXZlbnQgPSBmdW5jdGlvbihyZXN1bHQ6YW55KSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHJlc3VsdC50eXBlPT09XCJDaGlsZFJlbW92ZWRcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5EZWxldGVEYXJlKHJlc3VsdC5rZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQudHlwZSA9PT0gXCJDaGlsZEFkZGVkXCIpIFxyXG4gICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoc2VsZi5DaGVja0lmRGFyZUFkZGVkKHJlc3VsdC5rZXkpID09IHRydWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLk5ld0RhcmUocmVzdWx0LmtleSwgcmVzdWx0LnZhbHVlLlN0YXR1cywgcmVzdWx0LnZhbHVlLkRhcmUsIHJlc3VsdC52YWx1ZS5Gcm9tKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbGlzdGVuIHRvIGNoYW5nZXMgaW4gdGhlIC91c2VycyBwYXRoXHJcbiAgICAgICAgICAgIHBhdGggPSBcIi9EYXJlcy9cIit0aGlzLlVzZXI7XHJcbiAgICAgICAgICAgIGZpcmViYXNlLmFkZENoaWxkRXZlbnRMaXN0ZW5lcihvbkNoaWxkRXZlbnQscGF0aCk7XHJcbiAgICAgICAgICAgIHBhdGggPSBcIlwiO1xyXG4gICAgfVxyXG4gICAgR2V0U2NvcmUoKVxyXG4gICAgeyAgICBcclxuICAgICAgICB2YXIgb25DaGlsZEV2ZW50ID0gZnVuY3Rpb24ocmVzdWx0OmFueSkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzZWxmLlNldFVJU2NvcmUocmVzdWx0LnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHBhdGggPSBcIi9Vc2Vycy9cIit0aGlzLlVzZXIgKyBcIi9TY29yZVwiO1xyXG4gICAgICAgIGZpcmViYXNlLmFkZFZhbHVlRXZlbnRMaXN0ZW5lcihvbkNoaWxkRXZlbnQscGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ2hlY2tJZkRhcmVBZGRlZChpZDpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIEFkZERhcmUgPSB0cnVlO1xyXG4gICAgICAgIGZvciAodmFyIGk9MDtpPHRoaXMuRGFyZXMubGVuZ3RoO2krKykgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5EYXJlcy5nZXRJdGVtKGkpLklkID09PSBpZCkgXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEFkZERhcmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQWRkRGFyZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgRGVsZXRlRGFyZShpZDpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5TZXRTY29yZSgpO1xyXG4gICAgICAgIGZvciAodmFyIGk9MDtpPHRoaXMuRGFyZXMubGVuZ3RoO2krKykgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5EYXJlcy5nZXRJdGVtKGkpLklkID09PSBpZCkgXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuRGFyZXMuc3BsaWNlKGksMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBOZXdEYXJlKGlkOnN0cmluZywgU3RhdHVzT25EYXJlOiBzdHJpbmcsIG5EYXJlOnN0cmluZywgRnJvbTpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5EYXJlcy5wdXNoKG5ldyBEYXJlKGlkLCBTdGF0dXNPbkRhcmUsbkRhcmUsRnJvbSx0aGlzLlVzZXIpKTtcclxuICAgIH1cclxuXHJcbiAgICBTZW5kRGFyZSgpXHJcbiAgICB7IFxyXG4gICAgICAgIFBhZ2UudG9wbW9zdCgpLm5hdmlnYXRlKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJQYWdlL1NlbmRUby9TZW5kVG9cIixcclxuICAgICAgICAgICAgY29udGV4dDp7VXNlcm5hbWU6IHRoaXMuVXNlciwgRGFyZTp0aGlzLklucHV0RGFyZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNsaWRlQm90dG9tXCIsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzgwLFxyXG4gICAgICAgICAgICAgICAgY3VydmU6IFwiZWFzZUluXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0ZWQ6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBTZXRBcHBsaWNhdGlvbihVc2VybmFtZTpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5Vc2VyID0gVXNlcm5hbWU7XHJcbiAgICAgICAgdGhpcy5zZXQoXCJHVUlVc2VyXCIsdGhpcy5Vc2VyKTtcclxuICAgICAgICB0aGlzLkdldERhcmVzKCk7XHJcbiAgICAgICAgdGhpcy5HZXRTY29yZSgpO1xyXG4gICAgfVxyXG5cclxuICBcclxuICAgIFNldFVJU2NvcmUoQVNjb3JlOm51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLnNldChcIlNjb3JlXCIsIEFTY29yZSk7XHJcbiAgICB9XHJcblxyXG4gICAgU2V0U2NvcmUoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBhZGRpbmcgPSAxMDtcclxuICAgICAgICB2YXIgUmVzdWx0ID0gdGhpcy5TY29yZTtcclxuICAgICAgIFxyXG4gICAgICAgIFJlc3VsdCA9IFJlc3VsdCArIGFkZGluZztcclxuICAgICAgICBmaXJlYmFzZS51cGRhdGUoXHJcbiAgICAgICAgICAgICcvVXNlcnMvJyArIHRoaXMuVXNlcixcclxuICAgICAgICAgICAgeydTY29yZSc6IFJlc3VsdH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIEdvVG9GcmllbmRzUGFnZSgpXHJcbiAgICB7XHJcbiAgICAgICAgUGFnZS50b3Btb3N0KCkubmF2aWdhdGUoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtb2R1bGVOYW1lOiBcIlBhZ2UvRnJpZW5kc1BhZ2UvRnJpZW5kc1wiLFxyXG4gICAgICAgICAgICAgY29udGV4dDp7VXNlcm5hbWU6IHRoaXMuVXNlclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzbGlkZUJvdHRvbVwiLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDM4MCxcclxuICAgICAgICAgICAgICAgIGN1cnZlOiBcImVhc2VJblwiXHJcbiAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRlZDogdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIExvZ291dCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5Vc2VyID0gXCJcIjtcclxuICAgICAgICB0aGlzLnNldChcIlVzZXJuYW1lXCIsXCJcIik7XHJcbiAgICAgICAgdGhpcy5zZXQoXCJJbnB1dERhcmVcIixcIlwiKTtcclxuICAgICAgICB3aGlsZSh0aGlzLkRhcmVzLmxlbmd0aCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLkRhcmVzLnBvcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmlyZWJhc2UubG9nb3V0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgUGFnZS50b3Btb3N0KCkuZ29CYWNrKCk7XHJcbiAgICB9XHJcbiAgXHJcbn0gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYWluTW9kZWw7Il19