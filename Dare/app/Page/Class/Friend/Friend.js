"use strict";
var firebase = require("nativescript-plugin-firebase");
var observable_1 = require("data/observable");
var Friend = (function (_super) {
    __extends(Friend, _super);
    function Friend(Username, FriendsUsername, AreFriends) {
        _super.call(this);
        this.Username = Username;
        this.FriendsUsername = FriendsUsername;
        this.AreFriends = AreFriends;
        this.SelectedFriend = false;
        this.Color = "red";
    }
    Friend.prototype.Select = function () {
        this.SelectedFriend = !this.SelectedFriend;
        if (this.SelectedFriend == true) {
            this.set("Color", "green");
        }
        else {
            //Samme her
            this.set("Color", "red");
        }
    };
    Friend.prototype.SendRequest = function () {
        var OUsername = {};
        OUsername[this.Username] = false;
        firebase.setValue("Users/" + this.FriendsUsername + "/Friends/Request/", OUsername);
        alert("Send friend request to " + this.FriendsUsername);
    };
    Friend.prototype.SetDate = function (Date) {
        this.Date = Date;
    };
    Friend.prototype.AcceptFriendRequest = function () {
        var OUsername = {};
        OUsername[this.Username] = true;
        var FUsername = {};
        FUsername[this.FriendsUsername] = true;
        firebase.setValue("Users/" + this.Username + "/Friends/Accept/", FUsername);
        firebase.setValue("Users/" + this.FriendsUsername + "/Friends/Accept/", OUsername);
        firebase.remove("Users/" + this.Username + "/Friends/Request/" + this.FriendsUsername);
    };
    Friend.prototype.Delete = function () {
        firebase.remove("Users/" + this.Username + "/Friends/Accept/" + this.FriendsUsername);
        firebase.remove("Users/" + this.FriendsUsername + "/Friends/Accept/" + this.Username);
    };
    Friend.prototype.Send = function (InputDare) {
        firebase.push("Dares/" + this.FriendsUsername, { 'From': this.Username, 'Dare': InputDare });
        this.SelectedFriend = false;
        this.set("Color", "red");
    };
    Friend.prototype.GetUsername = function () {
        return this.FriendsUsername;
    };
    return Friend;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Friend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnJpZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRnJpZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBQzFELDJCQUEwQixpQkFBaUIsQ0FBQyxDQUFBO0FBQzVDO0lBQXFCLDBCQUFVO0lBUTNCLGdCQUFZLFFBQWUsRUFBRSxlQUFzQixFQUFFLFVBQW1CO1FBQ3BFLGlCQUFPLENBQUM7UUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUU1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsdUJBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxjQUFjLEdBQUUsQ0FBRSxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzVDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztZQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvQixDQUFDO1FBQ0QsSUFBSSxDQUFBLENBQUM7WUFDRCxXQUFXO1lBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsQ0FBQztJQUNKLENBQUM7SUFFRCw0QkFBVyxHQUFYO1FBQ0ksSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxlQUFlLEdBQUMsbUJBQW1CLEVBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0UsS0FBSyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsd0JBQU8sR0FBUCxVQUFRLElBQVM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsb0NBQW1CLEdBQW5CO1FBQ0ksSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxlQUFlLEdBQUMsa0JBQWtCLEVBQUcsU0FBUyxDQUFDLENBQUM7UUFDaEYsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxtQkFBbUIsR0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELHVCQUFNLEdBQU47UUFDSSxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRixRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsZUFBZSxHQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBR0QscUJBQUksR0FBSixVQUFLLFNBQVM7UUFDVCxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsZUFBZSxFQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNELDRCQUFXLEdBQVg7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBQ0wsYUFBQztBQUFELENBQUMsQUFqRUQsQ0FBcUIsdUJBQVUsR0FpRTlCO0FBRUQ7a0JBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5pbXBvcnR7IE9ic2VydmFibGUgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XG5jbGFzcyBGcmllbmQgZXh0ZW5kcyBPYnNlcnZhYmxle1xuICAgIFVzZXJuYW1lOiBzdHJpbmc7XG4gICAgRnJpZW5kc1VzZXJuYW1lOiBzdHJpbmc7XG4gICAgQXJlRnJpZW5kczogYm9vbGVhbjtcbiAgICBTZWxlY3RlZEZyaWVuZDpib29sZWFuO1xuICAgIERhdGU6IERhdGU7XG4gICAgQ29sb3I6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKFVzZXJuYW1lOnN0cmluZywgRnJpZW5kc1VzZXJuYW1lOnN0cmluZywgQXJlRnJpZW5kczogYm9vbGVhbil7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgdGhpcy5Vc2VybmFtZSA9IFVzZXJuYW1lO1xuICAgICAgIHRoaXMuRnJpZW5kc1VzZXJuYW1lID0gRnJpZW5kc1VzZXJuYW1lO1xuICAgICAgIHRoaXMuQXJlRnJpZW5kcyA9IEFyZUZyaWVuZHM7XG4gICAgICAgdGhpcy5TZWxlY3RlZEZyaWVuZCA9IGZhbHNlO1xuICAgICAgIFxuICAgICAgIHRoaXMuQ29sb3IgPSBcInJlZFwiO1xuICAgIH1cblxuICAgIFNlbGVjdCgpe1xuICAgICAgICB0aGlzLlNlbGVjdGVkRnJpZW5kID0hIHRoaXMuU2VsZWN0ZWRGcmllbmQ7XG4gICAgICAgaWYodGhpcy5TZWxlY3RlZEZyaWVuZCA9PSB0cnVlKXtcbiAgICAgICAgICAgdGhpcy5zZXQoXCJDb2xvclwiLCBcImdyZWVuXCIpO1xuICAgICAgICAgICAvL0dqw7hyIG9tIHRpbCBlbiBhbm5lbiBmYXJnZVxuICAgICAgIH1cbiAgICAgICBlbHNle1xuICAgICAgICAgICAvL1NhbW1lIGhlclxuICAgICAgICAgICB0aGlzLnNldChcIkNvbG9yXCIsIFwicmVkXCIpO1xuICAgICAgIH1cbiAgICB9XG5cbiAgICBTZW5kUmVxdWVzdCgpe1xuICAgICAgICB2YXIgT1VzZXJuYW1lID0ge307XG4gICAgICAgIE9Vc2VybmFtZVt0aGlzLlVzZXJuYW1lXSA9IGZhbHNlO1xuICAgICAgICAgZmlyZWJhc2Uuc2V0VmFsdWUoXCJVc2Vycy9cIit0aGlzLkZyaWVuZHNVc2VybmFtZStcIi9GcmllbmRzL1JlcXVlc3QvXCIsT1VzZXJuYW1lKTtcbiAgICAgICAgIGFsZXJ0KFwiU2VuZCBmcmllbmQgcmVxdWVzdCB0byBcIiArIHRoaXMuRnJpZW5kc1VzZXJuYW1lKTtcbiAgICB9XG5cbiAgICBTZXREYXRlKERhdGU6RGF0ZSl7XG4gICAgICAgIHRoaXMuRGF0ZSA9IERhdGU7XG4gICAgfVxuXG4gICAgQWNjZXB0RnJpZW5kUmVxdWVzdCgpe1xuICAgICAgICB2YXIgT1VzZXJuYW1lID0ge307XG4gICAgICAgIE9Vc2VybmFtZVt0aGlzLlVzZXJuYW1lXSA9IHRydWU7XG4gICAgICAgIHZhciBGVXNlcm5hbWUgPSB7fTtcbiAgICAgICAgRlVzZXJuYW1lW3RoaXMuRnJpZW5kc1VzZXJuYW1lXSA9IHRydWU7XG4gICAgICAgICBmaXJlYmFzZS5zZXRWYWx1ZShcIlVzZXJzL1wiK3RoaXMuVXNlcm5hbWUrXCIvRnJpZW5kcy9BY2NlcHQvXCIsIEZVc2VybmFtZSk7XG4gICAgICAgICBmaXJlYmFzZS5zZXRWYWx1ZShcIlVzZXJzL1wiK3RoaXMuRnJpZW5kc1VzZXJuYW1lK1wiL0ZyaWVuZHMvQWNjZXB0L1wiLCAgT1VzZXJuYW1lKTtcbiAgICAgICAgIGZpcmViYXNlLnJlbW92ZShcIlVzZXJzL1wiK3RoaXMuVXNlcm5hbWUrXCIvRnJpZW5kcy9SZXF1ZXN0L1wiK3RoaXMuRnJpZW5kc1VzZXJuYW1lKTtcbiAgICB9XG5cbiAgICBEZWxldGUoKXtcbiAgICAgICAgZmlyZWJhc2UucmVtb3ZlKFwiVXNlcnMvXCIrdGhpcy5Vc2VybmFtZStcIi9GcmllbmRzL0FjY2VwdC9cIit0aGlzLkZyaWVuZHNVc2VybmFtZSk7XG4gICAgICAgIGZpcmViYXNlLnJlbW92ZShcIlVzZXJzL1wiK3RoaXMuRnJpZW5kc1VzZXJuYW1lK1wiL0ZyaWVuZHMvQWNjZXB0L1wiK3RoaXMuVXNlcm5hbWUpO1xuICAgIH1cbiAgICBcbiAgIFxuICAgIFNlbmQoSW5wdXREYXJlKXtcbiAgICAgICAgIGZpcmViYXNlLnB1c2goXCJEYXJlcy9cIit0aGlzLkZyaWVuZHNVc2VybmFtZSx7J0Zyb20nOiB0aGlzLlVzZXJuYW1lLCAnRGFyZSc6SW5wdXREYXJlfSk7XG4gICAgICAgICB0aGlzLlNlbGVjdGVkRnJpZW5kID0gZmFsc2U7XG4gICAgICAgICB0aGlzLnNldChcIkNvbG9yXCIsIFwicmVkXCIpO1xuICAgIH1cbiAgICBHZXRVc2VybmFtZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5GcmllbmRzVXNlcm5hbWU7XG4gICAgfVxufSBcblxuZXhwb3J0IGRlZmF1bHQgRnJpZW5kOyJdfQ==