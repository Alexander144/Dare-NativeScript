"use strict";
var firebase = require("nativescript-plugin-firebase");
var observable_1 = require("data/observable");
var Friend = (function (_super) {
    __extends(Friend, _super);
    function Friend(Username, FriendsUsername, AreFriends) {
        _super.call(this);
        this.Username = Username;
        this.FriendsUsername = FriendsUsername;
        this.AreFriends = AreFriends;
        this.SelectedFriend = false;
        this.Color = "red";
    }
    Friend.prototype.Select = function () {
        this.SelectedFriend = !this.SelectedFriend;
        if (this.SelectedFriend == true) {
            this.set("Color", "green");
        }
        else {
            //Samme her
            this.set("Color", "red");
        }
    };
    Friend.prototype.SendRequest = function () {
        var OUsername = {};
        OUsername[this.Username] = false;
        firebase.setValue("Users/" + this.FriendsUsername + "/Friends/Request/", OUsername);
        alert("Send friend request to " + this.FriendsUsername);
    };
    Friend.prototype.SetDate = function (Date) {
        this.Date = Date;
    };
    Friend.prototype.AcceptFriendRequest = function () {
        var OUsername = {};
        OUsername[this.Username] = true;
        var FUsername = {};
        FUsername[this.FriendsUsername] = true;
        firebase.setValue("Users/" + this.Username + "/Friends/Accept/", FUsername);
        firebase.setValue("Users/" + this.FriendsUsername + "/Friends/Accept/", OUsername);
        firebase.remove("Users/" + this.Username + "/Friends/Request/" + this.FriendsUsername);
    };
    Friend.prototype.Delete = function () {
        firebase.remove("Users/" + this.Username + "/Friends/Accept/" + this.FriendsUsername);
        firebase.remove("Users/" + this.FriendsUsername + "/Friends/Accept/" + this.Username);
    };
    Friend.prototype.Send = function (InputDare) {
        firebase.push("Dares/" + this.FriendsUsername, { 'From': this.Username, 'Dare': InputDare });
        this.SelectedFriend = false;
        this.set("Color", "red");
    };
    return Friend;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Friend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnJpZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRnJpZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBQzFELDJCQUEwQixpQkFBaUIsQ0FBQyxDQUFBO0FBQzVDO0lBQXFCLDBCQUFVO0lBUTNCLGdCQUFZLFFBQWUsRUFBRSxlQUFzQixFQUFFLFVBQW1CO1FBQ3BFLGlCQUFPLENBQUM7UUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUU1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsdUJBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxjQUFjLEdBQUUsQ0FBRSxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzVDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztZQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvQixDQUFDO1FBQ0QsSUFBSSxDQUFBLENBQUM7WUFDRCxXQUFXO1lBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsQ0FBQztJQUNKLENBQUM7SUFFRCw0QkFBVyxHQUFYO1FBQ0ksSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxlQUFlLEdBQUMsbUJBQW1CLEVBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0UsS0FBSyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsd0JBQU8sR0FBUCxVQUFRLElBQVM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsb0NBQW1CLEdBQW5CO1FBQ0ksSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxlQUFlLEdBQUMsa0JBQWtCLEVBQUcsU0FBUyxDQUFDLENBQUM7UUFDaEYsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxtQkFBbUIsR0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELHVCQUFNLEdBQU47UUFDSSxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRixRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsZUFBZSxHQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBR0QscUJBQUksR0FBSixVQUFLLFNBQVM7UUFDVCxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsZUFBZSxFQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNMLGFBQUM7QUFBRCxDQUFDLEFBOURELENBQXFCLHVCQUFVLEdBOEQ5QjtBQUVEO2tCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xyXG5pbXBvcnR7IE9ic2VydmFibGUgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmNsYXNzIEZyaWVuZCBleHRlbmRzIE9ic2VydmFibGV7XHJcbiAgICBVc2VybmFtZTogc3RyaW5nO1xyXG4gICAgRnJpZW5kc1VzZXJuYW1lOiBzdHJpbmc7XHJcbiAgICBBcmVGcmllbmRzOiBib29sZWFuO1xyXG4gICAgU2VsZWN0ZWRGcmllbmQ6Ym9vbGVhbjtcclxuICAgIERhdGU6IERhdGU7XHJcbiAgICBDb2xvcjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFVzZXJuYW1lOnN0cmluZywgRnJpZW5kc1VzZXJuYW1lOnN0cmluZywgQXJlRnJpZW5kczogYm9vbGVhbil7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgIHRoaXMuVXNlcm5hbWUgPSBVc2VybmFtZTtcclxuICAgICAgIHRoaXMuRnJpZW5kc1VzZXJuYW1lID0gRnJpZW5kc1VzZXJuYW1lO1xyXG4gICAgICAgdGhpcy5BcmVGcmllbmRzID0gQXJlRnJpZW5kcztcclxuICAgICAgIHRoaXMuU2VsZWN0ZWRGcmllbmQgPSBmYWxzZTtcclxuICAgICAgIFxyXG4gICAgICAgdGhpcy5Db2xvciA9IFwicmVkXCI7XHJcbiAgICB9XHJcblxyXG4gICAgU2VsZWN0KCl7XHJcbiAgICAgICAgdGhpcy5TZWxlY3RlZEZyaWVuZCA9ISB0aGlzLlNlbGVjdGVkRnJpZW5kO1xyXG4gICAgICAgaWYodGhpcy5TZWxlY3RlZEZyaWVuZCA9PSB0cnVlKXtcclxuICAgICAgICAgICB0aGlzLnNldChcIkNvbG9yXCIsIFwiZ3JlZW5cIik7XHJcbiAgICAgICAgICAgLy9HasO4ciBvbSB0aWwgZW4gYW5uZW4gZmFyZ2VcclxuICAgICAgIH1cclxuICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgLy9TYW1tZSBoZXJcclxuICAgICAgICAgICB0aGlzLnNldChcIkNvbG9yXCIsIFwicmVkXCIpO1xyXG4gICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFNlbmRSZXF1ZXN0KCl7XHJcbiAgICAgICAgdmFyIE9Vc2VybmFtZSA9IHt9O1xyXG4gICAgICAgIE9Vc2VybmFtZVt0aGlzLlVzZXJuYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICBmaXJlYmFzZS5zZXRWYWx1ZShcIlVzZXJzL1wiK3RoaXMuRnJpZW5kc1VzZXJuYW1lK1wiL0ZyaWVuZHMvUmVxdWVzdC9cIixPVXNlcm5hbWUpO1xyXG4gICAgICAgICBhbGVydChcIlNlbmQgZnJpZW5kIHJlcXVlc3QgdG8gXCIgKyB0aGlzLkZyaWVuZHNVc2VybmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgU2V0RGF0ZShEYXRlOkRhdGUpe1xyXG4gICAgICAgIHRoaXMuRGF0ZSA9IERhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgQWNjZXB0RnJpZW5kUmVxdWVzdCgpe1xyXG4gICAgICAgIHZhciBPVXNlcm5hbWUgPSB7fTtcclxuICAgICAgICBPVXNlcm5hbWVbdGhpcy5Vc2VybmFtZV0gPSB0cnVlO1xyXG4gICAgICAgIHZhciBGVXNlcm5hbWUgPSB7fTtcclxuICAgICAgICBGVXNlcm5hbWVbdGhpcy5GcmllbmRzVXNlcm5hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgZmlyZWJhc2Uuc2V0VmFsdWUoXCJVc2Vycy9cIit0aGlzLlVzZXJuYW1lK1wiL0ZyaWVuZHMvQWNjZXB0L1wiLCBGVXNlcm5hbWUpO1xyXG4gICAgICAgICBmaXJlYmFzZS5zZXRWYWx1ZShcIlVzZXJzL1wiK3RoaXMuRnJpZW5kc1VzZXJuYW1lK1wiL0ZyaWVuZHMvQWNjZXB0L1wiLCAgT1VzZXJuYW1lKTtcclxuICAgICAgICAgZmlyZWJhc2UucmVtb3ZlKFwiVXNlcnMvXCIrdGhpcy5Vc2VybmFtZStcIi9GcmllbmRzL1JlcXVlc3QvXCIrdGhpcy5GcmllbmRzVXNlcm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIERlbGV0ZSgpe1xyXG4gICAgICAgIGZpcmViYXNlLnJlbW92ZShcIlVzZXJzL1wiK3RoaXMuVXNlcm5hbWUrXCIvRnJpZW5kcy9BY2NlcHQvXCIrdGhpcy5GcmllbmRzVXNlcm5hbWUpO1xyXG4gICAgICAgIGZpcmViYXNlLnJlbW92ZShcIlVzZXJzL1wiK3RoaXMuRnJpZW5kc1VzZXJuYW1lK1wiL0ZyaWVuZHMvQWNjZXB0L1wiK3RoaXMuVXNlcm5hbWUpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgIFxyXG4gICAgU2VuZChJbnB1dERhcmUpe1xyXG4gICAgICAgICBmaXJlYmFzZS5wdXNoKFwiRGFyZXMvXCIrdGhpcy5GcmllbmRzVXNlcm5hbWUseydGcm9tJzogdGhpcy5Vc2VybmFtZSwgJ0RhcmUnOklucHV0RGFyZX0pO1xyXG4gICAgICAgICB0aGlzLlNlbGVjdGVkRnJpZW5kID0gZmFsc2U7XHJcbiAgICAgICAgIHRoaXMuc2V0KFwiQ29sb3JcIiwgXCJyZWRcIik7XHJcbiAgICB9XHJcbn0gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBGcmllbmQ7Il19