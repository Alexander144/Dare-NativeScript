"use strict";
var firebase = require("nativescript-plugin-firebase");
var observable_1 = require("data/observable");
var Dare = (function (_super) {
    __extends(Dare, _super);
    function Dare(Id, OutputDare, From, Username) {
        _super.call(this);
        this.Id = Id;
        this.OutputDare = OutputDare;
        this.From = From;
        this.Username = Username;
        this.StatusOnDare = "Received";
        this.Points = "0P";
        this.DareIsFromOrTo = "From";
        this.ImageToAcceptDare = null;
        this.DareSettingToogle = false;
        this.DareSettingHide = "collapse";
        this.set("DareSettingToogle", this.DareSettingToogle);
    }
    Dare.prototype.SetDate = function (Date) {
        this.Date = Date;
    };
    Dare.prototype.ShowDareSetting = function () {
        this.DareSettingToogle = !this.DareSettingToogle;
        if (this.DareSettingToogle) {
            this.set("DareSettingHide", "visible");
        }
        else {
            this.set("DareSettingHide", "collapse");
        }
        this.set("DareSettingToogle", this.DareSettingToogle);
        console.log(this.DareSettingToogle);
    };
    Dare.prototype.DoneDare = function () {
        firebase.remove("/Dares/" + this.Username + "/" + this.Id);
    };
    return Dare;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Dare;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQU8sUUFBUSxXQUFXLDhCQUE4QixDQUFDLENBQUM7QUFFMUQsMkJBQTBCLGlCQUFpQixDQUFDLENBQUE7QUFLNUM7SUFBbUIsd0JBQVU7SUFlekIsY0FBWSxFQUFTLEVBQUUsVUFBaUIsRUFBRSxJQUFXLEVBQUUsUUFBZTtRQUNwRSxpQkFBTyxDQUFDO1FBQ1AsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0Qsc0JBQU8sR0FBUCxVQUFRLElBQVM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBQ0QsOEJBQWUsR0FBZjtRQUVFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FDMUIsQ0FBQztZQUNHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELElBQUksQ0FDSixDQUFDO1lBQ0csSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDQSx1QkFBUSxHQUFSO1FBQ0csUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFDTCxXQUFDO0FBQUQsQ0FBQyxBQWpERCxDQUFtQix1QkFBVSxHQWlENUI7QUFFRDtrQkFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tIFwidWkvaW1hZ2VcIjtcclxuaW1wb3J0eyBPYnNlcnZhYmxlIH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlQXJyYXkgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlLWFycmF5XCI7XHJcbmltcG9ydCB7RXZlbnREYXRhfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoXCJ1aS9lbnVtc1wiKTtcclxuXHJcbmNsYXNzIERhcmUgZXh0ZW5kcyBPYnNlcnZhYmxle1xyXG4gICAgVXNlcm5hbWU6IHN0cmluZztcclxuICAgIElkOiBzdHJpbmc7XHJcbiAgICBPdXRwdXREYXJlOiBzdHJpbmc7XHJcbiAgICBGcm9tOiBzdHJpbmc7XHJcbiAgICBEYXRlOiBEYXRlO1xyXG4gICAgU3RhdHVzT25EYXJlOiBzdHJpbmc7XHJcbiAgICBQb2ludHM6IHN0cmluZztcclxuICAgIERhcmVJc0Zyb21PclRvOiBzdHJpbmc7XHJcbiAgICBJbWFnZVRvQWNjZXB0RGFyZTogSW1hZ2U7XHJcbiAgICBEYXJlU2V0dGluZ1Rvb2dsZTogYm9vbGVhbjtcclxuICAgIERhcmVTZXR0aW5nSGlkZTogc3RyaW5nO1xyXG5cclxuXHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKElkOnN0cmluZywgT3V0cHV0RGFyZTpzdHJpbmcsIEZyb206c3RyaW5nLCBVc2VybmFtZTpzdHJpbmcpe1xyXG4gICAgICBzdXBlcigpO1xyXG4gICAgICAgdGhpcy5JZCA9IElkO1xyXG4gICAgICAgdGhpcy5PdXRwdXREYXJlID0gT3V0cHV0RGFyZTtcclxuICAgICAgIHRoaXMuRnJvbSA9IEZyb207XHJcbiAgICAgICB0aGlzLlVzZXJuYW1lID0gVXNlcm5hbWU7XHJcbiAgICAgICB0aGlzLlN0YXR1c09uRGFyZSA9IFwiUmVjZWl2ZWRcIjtcclxuICAgICAgIHRoaXMuUG9pbnRzID0gXCIwUFwiO1xyXG4gICAgICAgdGhpcy5EYXJlSXNGcm9tT3JUbyA9IFwiRnJvbVwiO1xyXG4gICAgICAgdGhpcy5JbWFnZVRvQWNjZXB0RGFyZSA9IG51bGw7XHJcbiAgICAgICB0aGlzLkRhcmVTZXR0aW5nVG9vZ2xlID0gZmFsc2U7XHJcbiAgICAgICB0aGlzLkRhcmVTZXR0aW5nSGlkZSA9IFwiY29sbGFwc2VcIjtcclxuICAgICAgIHRoaXMuc2V0KFwiRGFyZVNldHRpbmdUb29nbGVcIiwgdGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSk7XHJcbiAgICB9XHJcbiAgICBTZXREYXRlKERhdGU6RGF0ZSl7XHJcbiAgICAgICAgdGhpcy5EYXRlID0gRGF0ZTtcclxuICAgIH1cclxuICAgIFNob3dEYXJlU2V0dGluZygpXHJcbiAgICB7XHJcbiAgICAgIHRoaXMuRGFyZVNldHRpbmdUb29nbGUgPSAhdGhpcy5EYXJlU2V0dGluZ1Rvb2dsZTtcclxuICAgICAgaWYodGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSlcclxuICAgICAge1xyXG4gICAgICAgICAgdGhpcy5zZXQoXCJEYXJlU2V0dGluZ0hpZGVcIiwgXCJ2aXNpYmxlXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2VcclxuICAgICAge1xyXG4gICAgICAgICAgdGhpcy5zZXQoXCJEYXJlU2V0dGluZ0hpZGVcIiwgXCJjb2xsYXBzZVwiKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNldChcIkRhcmVTZXR0aW5nVG9vZ2xlXCIsIHRoaXMuRGFyZVNldHRpbmdUb29nbGUpO1xyXG4gICAgICAgY29uc29sZS5sb2codGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSk7XHJcbiAgICB9XHJcbiAgICAgRG9uZURhcmUoKXtcclxuICAgICAgICBmaXJlYmFzZS5yZW1vdmUoXCIvRGFyZXMvXCIgKyB0aGlzLlVzZXJuYW1lICsgXCIvXCIgKyB0aGlzLklkKTtcclxuICAgIH1cclxufSBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERhcmU7Il19