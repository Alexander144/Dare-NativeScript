"use strict";
var firebase = require("nativescript-plugin-firebase");
var observable_1 = require("data/observable");
var Dare = (function (_super) {
    __extends(Dare, _super);
    function Dare(Id, OutputDare, From, Username) {
        _super.call(this);
        this.Id = Id;
        this.OutputDare = OutputDare;
        this.From = From;
        this.Username = Username;
        this.StatusOnDare = "Received";
        this.Points = "0P";
        this.DareIsFromOrTo = "From";
        this.ImageToAcceptDare = null;
        this.DareSettingToogle = false;
        this.DareSettingHide = 'collapsed';
    }
    Dare.prototype.SetDate = function (Date) {
        this.Date = Date;
    };
    Dare.prototype.ShowDareSetting = function () {
        this.DareSettingToogle = !this.DareSettingToogle;
        if (this.DareSettingToogle) {
            this.set("DareSettingHide", 'visible');
        }
        else {
            this.set("DareSettingHide", 'collapsed');
        }
        console.log(this.DareSettingToogle);
    };
    Dare.prototype.DoneDare = function () {
        firebase.remove("/Dares/" + this.Username + "/" + this.Id);
    };
    return Dare;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Dare;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQU8sUUFBUSxXQUFXLDhCQUE4QixDQUFDLENBQUM7QUFFMUQsMkJBQTBCLGlCQUFpQixDQUFDLENBQUE7QUFJNUM7SUFBbUIsd0JBQVU7SUFlekIsY0FBWSxFQUFTLEVBQUUsVUFBaUIsRUFBRSxJQUFXLEVBQUUsUUFBZTtRQUNwRSxpQkFBTyxDQUFDO1FBQ1AsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUM7SUFDdEMsQ0FBQztJQUNELHNCQUFPLEdBQVAsVUFBUSxJQUFTO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUNELDhCQUFlLEdBQWY7UUFFRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFDakQsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQzFCLENBQUM7WUFDRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFDRCxJQUFJLENBQ0osQ0FBQztZQUNHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNBLHVCQUFRLEdBQVI7UUFDRyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQUFDLEFBL0NELENBQW1CLHVCQUFVLEdBK0M1QjtBQUVEO2tCQUFlLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCJ1aS9pbWFnZVwiO1xyXG5pbXBvcnR7IE9ic2VydmFibGUgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGVBcnJheSB9IGZyb20gXCJkYXRhL29ic2VydmFibGUtYXJyYXlcIjtcclxuaW1wb3J0IHtFdmVudERhdGF9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcclxuXHJcbmNsYXNzIERhcmUgZXh0ZW5kcyBPYnNlcnZhYmxle1xyXG4gICAgVXNlcm5hbWU6IHN0cmluZztcclxuICAgIElkOiBzdHJpbmc7XHJcbiAgICBPdXRwdXREYXJlOiBzdHJpbmc7XHJcbiAgICBGcm9tOiBzdHJpbmc7XHJcbiAgICBEYXRlOiBEYXRlO1xyXG4gICAgU3RhdHVzT25EYXJlOiBzdHJpbmc7XHJcbiAgICBQb2ludHM6IHN0cmluZztcclxuICAgIERhcmVJc0Zyb21PclRvOiBzdHJpbmc7XHJcbiAgICBJbWFnZVRvQWNjZXB0RGFyZTogSW1hZ2U7XHJcbiAgICBEYXJlU2V0dGluZ1Rvb2dsZTogYm9vbGVhbjtcclxuICAgIERhcmVTZXR0aW5nSGlkZTogc3RyaW5nO1xyXG5cclxuXHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKElkOnN0cmluZywgT3V0cHV0RGFyZTpzdHJpbmcsIEZyb206c3RyaW5nLCBVc2VybmFtZTpzdHJpbmcpe1xyXG4gICAgICBzdXBlcigpO1xyXG4gICAgICAgdGhpcy5JZCA9IElkO1xyXG4gICAgICAgdGhpcy5PdXRwdXREYXJlID0gT3V0cHV0RGFyZTtcclxuICAgICAgIHRoaXMuRnJvbSA9IEZyb207XHJcbiAgICAgICB0aGlzLlVzZXJuYW1lID0gVXNlcm5hbWU7XHJcbiAgICAgICB0aGlzLlN0YXR1c09uRGFyZSA9IFwiUmVjZWl2ZWRcIjtcclxuICAgICAgIHRoaXMuUG9pbnRzID0gXCIwUFwiO1xyXG4gICAgICAgdGhpcy5EYXJlSXNGcm9tT3JUbyA9IFwiRnJvbVwiO1xyXG4gICAgICAgdGhpcy5JbWFnZVRvQWNjZXB0RGFyZSA9IG51bGw7XHJcbiAgICAgICB0aGlzLkRhcmVTZXR0aW5nVG9vZ2xlID0gZmFsc2U7XHJcbiAgICAgICB0aGlzLkRhcmVTZXR0aW5nSGlkZSA9ICdjb2xsYXBzZWQnO1xyXG4gICAgfVxyXG4gICAgU2V0RGF0ZShEYXRlOkRhdGUpe1xyXG4gICAgICAgIHRoaXMuRGF0ZSA9IERhdGU7XHJcbiAgICB9XHJcbiAgICBTaG93RGFyZVNldHRpbmcoKVxyXG4gICAge1xyXG4gICAgICB0aGlzLkRhcmVTZXR0aW5nVG9vZ2xlID0gIXRoaXMuRGFyZVNldHRpbmdUb29nbGU7XHJcbiAgICAgIGlmKHRoaXMuRGFyZVNldHRpbmdUb29nbGUpXHJcbiAgICAgIHtcclxuICAgICAgICAgIHRoaXMuc2V0KFwiRGFyZVNldHRpbmdIaWRlXCIsICd2aXNpYmxlJyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICB7XHJcbiAgICAgICAgICB0aGlzLnNldChcIkRhcmVTZXR0aW5nSGlkZVwiLCAnY29sbGFwc2VkJyk7XHJcbiAgICAgIH1cclxuICAgICAgIGNvbnNvbGUubG9nKHRoaXMuRGFyZVNldHRpbmdUb29nbGUpO1xyXG4gICAgfVxyXG4gICAgIERvbmVEYXJlKCl7XHJcbiAgICAgICAgZmlyZWJhc2UucmVtb3ZlKFwiL0RhcmVzL1wiICsgdGhpcy5Vc2VybmFtZSArIFwiL1wiICsgdGhpcy5JZCk7XHJcbiAgICB9XHJcbn0gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBEYXJlOyJdfQ==