"use strict";
var firebase = require("nativescript-plugin-firebase");
var observable_1 = require("data/observable");
var Dare = (function (_super) {
    __extends(Dare, _super);
    function Dare(Id, OutputDare, From, Username) {
        _super.call(this);
        this.Id = Id;
        this.OutputDare = OutputDare;
        this.From = From;
        this.Username = Username;
        this.StatusOnDare = "Received";
        this.Points = "0P";
        this.DareIsFromOrTo = "From";
        this.ImageToAcceptDare = null;
        this.DareSettingToogle = false;
        this.DareSettingHide = "collapse";
        this.set("DareSettingToogle", this.DareSettingToogle);
    }
    Dare.prototype.SetDate = function (Date) {
        this.Date = Date;
    };
    Dare.prototype.ShowDareSetting = function () {
        this.DareSettingToogle = !this.DareSettingToogle;
        if (this.DareSettingToogle) {
            this.set("DareSettingHide", "visible");
        }
        else {
            this.set("DareSettingHide", "collapse");
        }
        this.set("DareSettingToogle", this.DareSettingToogle);
        console.log(this.DareSettingToogle);
    };
    Dare.prototype.DoneDare = function () {
        firebase.remove("/Dares/" + this.Username + "/" + this.Id);
    };
    return Dare;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Dare;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQU8sUUFBUSxXQUFXLDhCQUE4QixDQUFDLENBQUM7QUFFMUQsMkJBQTBCLGlCQUFpQixDQUFDLENBQUE7QUFLNUM7SUFBbUIsd0JBQVU7SUFlekIsY0FBWSxFQUFTLEVBQUUsVUFBaUIsRUFBRSxJQUFXLEVBQUUsUUFBZTtRQUNwRSxpQkFBTyxDQUFDO1FBQ1AsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0Qsc0JBQU8sR0FBUCxVQUFRLElBQVM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBQ0QsOEJBQWUsR0FBZjtRQUVFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FDMUIsQ0FBQztZQUNHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELElBQUksQ0FDSixDQUFDO1lBQ0csSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDQSx1QkFBUSxHQUFSO1FBQ0csUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFDTCxXQUFDO0FBQUQsQ0FBQyxBQWpERCxDQUFtQix1QkFBVSxHQWlENUI7QUFFRDtrQkFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcInVpL2ltYWdlXCI7XG5pbXBvcnR7IE9ic2VydmFibGUgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQXJyYXkgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlLWFycmF5XCI7XG5pbXBvcnQge0V2ZW50RGF0YX0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IGVudW1zID0gcmVxdWlyZShcInVpL2VudW1zXCIpO1xuXG5jbGFzcyBEYXJlIGV4dGVuZHMgT2JzZXJ2YWJsZXtcbiAgICBVc2VybmFtZTogc3RyaW5nO1xuICAgIElkOiBzdHJpbmc7XG4gICAgT3V0cHV0RGFyZTogc3RyaW5nO1xuICAgIEZyb206IHN0cmluZztcbiAgICBEYXRlOiBEYXRlO1xuICAgIFN0YXR1c09uRGFyZTogc3RyaW5nO1xuICAgIFBvaW50czogc3RyaW5nO1xuICAgIERhcmVJc0Zyb21PclRvOiBzdHJpbmc7XG4gICAgSW1hZ2VUb0FjY2VwdERhcmU6IEltYWdlO1xuICAgIERhcmVTZXR0aW5nVG9vZ2xlOiBib29sZWFuO1xuICAgIERhcmVTZXR0aW5nSGlkZTogc3RyaW5nO1xuXG5cbiAgICBcbiAgICBjb25zdHJ1Y3RvcihJZDpzdHJpbmcsIE91dHB1dERhcmU6c3RyaW5nLCBGcm9tOnN0cmluZywgVXNlcm5hbWU6c3RyaW5nKXtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAgdGhpcy5JZCA9IElkO1xuICAgICAgIHRoaXMuT3V0cHV0RGFyZSA9IE91dHB1dERhcmU7XG4gICAgICAgdGhpcy5Gcm9tID0gRnJvbTtcbiAgICAgICB0aGlzLlVzZXJuYW1lID0gVXNlcm5hbWU7XG4gICAgICAgdGhpcy5TdGF0dXNPbkRhcmUgPSBcIlJlY2VpdmVkXCI7XG4gICAgICAgdGhpcy5Qb2ludHMgPSBcIjBQXCI7XG4gICAgICAgdGhpcy5EYXJlSXNGcm9tT3JUbyA9IFwiRnJvbVwiO1xuICAgICAgIHRoaXMuSW1hZ2VUb0FjY2VwdERhcmUgPSBudWxsO1xuICAgICAgIHRoaXMuRGFyZVNldHRpbmdUb29nbGUgPSBmYWxzZTtcbiAgICAgICB0aGlzLkRhcmVTZXR0aW5nSGlkZSA9IFwiY29sbGFwc2VcIjtcbiAgICAgICB0aGlzLnNldChcIkRhcmVTZXR0aW5nVG9vZ2xlXCIsIHRoaXMuRGFyZVNldHRpbmdUb29nbGUpO1xuICAgIH1cbiAgICBTZXREYXRlKERhdGU6RGF0ZSl7XG4gICAgICAgIHRoaXMuRGF0ZSA9IERhdGU7XG4gICAgfVxuICAgIFNob3dEYXJlU2V0dGluZygpXG4gICAge1xuICAgICAgdGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSA9ICF0aGlzLkRhcmVTZXR0aW5nVG9vZ2xlO1xuICAgICAgaWYodGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSlcbiAgICAgIHtcbiAgICAgICAgICB0aGlzLnNldChcIkRhcmVTZXR0aW5nSGlkZVwiLCBcInZpc2libGVcIik7XG4gICAgICB9XG4gICAgICBlbHNlXG4gICAgICB7XG4gICAgICAgICAgdGhpcy5zZXQoXCJEYXJlU2V0dGluZ0hpZGVcIiwgXCJjb2xsYXBzZVwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0KFwiRGFyZVNldHRpbmdUb29nbGVcIiwgdGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSk7XG4gICAgICAgY29uc29sZS5sb2codGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSk7XG4gICAgfVxuICAgICBEb25lRGFyZSgpe1xuICAgICAgICBmaXJlYmFzZS5yZW1vdmUoXCIvRGFyZXMvXCIgKyB0aGlzLlVzZXJuYW1lICsgXCIvXCIgKyB0aGlzLklkKTtcbiAgICB9XG59IFxuXG5leHBvcnQgZGVmYXVsdCBEYXJlOyJdfQ==