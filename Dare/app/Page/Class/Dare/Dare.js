"use strict";
var Page = require("ui/frame");
var observable_1 = require("data/observable");
var Dare = (function (_super) {
    __extends(Dare, _super);
    function Dare(Id, StatusOnDare, OutputDare, From, Username) {
        _super.call(this);
        this.Id = Id;
        this.OutputDare = OutputDare;
        this.From = From;
        this.Username = Username;
        this.StatusOnDare = StatusOnDare;
        this.Points = "0P";
        this.DareIsFromOrTo = "From";
        this.ImageToAcceptDare = null;
        this.DareSettingToogle = false;
        this.DareSettingHide = "collapse";
        this.set("DareSettingToogle", this.DareSettingToogle);
    }
    Dare.prototype.SetDate = function (Date) {
        this.Date = Date;
    };
    Dare.prototype.ShowDareSetting = function () {
        this.DareSettingToogle = !this.DareSettingToogle;
        if (this.DareSettingToogle) {
            this.set("DareSettingHide", "visible");
        }
        else {
            this.set("DareSettingHide", "collapse");
        }
        this.set("DareSettingToogle", this.DareSettingToogle);
        console.log(this.DareSettingToogle);
    };
    Dare.prototype.AcceptDare = function () {
        Page.topmost().navigate({
            moduleName: "Page/CameraPage/Camera",
            context: { DareToAccept: this
            },
            transition: {
                name: "slideBottom",
                duration: 380,
                curve: "easeIn"
            },
            animated: true
        });
    };
    Dare.prototype.DeclineDare = function () {
    };
    return Dare;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Dare;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQU8sSUFBSSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBRWxDLDJCQUEwQixpQkFBaUIsQ0FBQyxDQUFBO0FBSzVDO0lBQW1CLHdCQUFVO0lBZXpCLGNBQVksRUFBUyxFQUFFLFlBQW9CLEVBQUUsVUFBaUIsRUFBRSxJQUFXLEVBQUUsUUFBZTtRQUMxRixpQkFBTyxDQUFDO1FBQ1AsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0Qsc0JBQU8sR0FBUCxVQUFRLElBQVM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBQ0QsOEJBQWUsR0FBZjtRQUVFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FDMUIsQ0FBQztZQUNHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELElBQUksQ0FDSixDQUFDO1lBQ0csSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCx5QkFBVSxHQUFWO1FBQ1EsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztZQUV0QixVQUFVLEVBQUUsd0JBQXdCO1lBQ25DLE9BQU8sRUFBQyxFQUFFLFlBQVksRUFBRSxJQUFJO2FBQ3hCO1lBQ0wsVUFBVSxFQUFFO2dCQUNSLElBQUksRUFBRSxhQUFhO2dCQUNuQixRQUFRLEVBQUUsR0FBRztnQkFDYixLQUFLLEVBQUUsUUFBUTthQUNqQjtZQUNGLFFBQVEsRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUNELDBCQUFXLEdBQVg7SUFFQSxDQUFDO0lBQ0wsV0FBQztBQUFELENBQUMsQUFoRUQsQ0FBbUIsdUJBQVUsR0FnRTVCO0FBRUQ7a0JBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XHJcbmltcG9ydCBQYWdlID0gcmVxdWlyZShcInVpL2ZyYW1lXCIpO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCJ1aS9pbWFnZVwiO1xyXG5pbXBvcnR7IE9ic2VydmFibGUgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGVBcnJheSB9IGZyb20gXCJkYXRhL29ic2VydmFibGUtYXJyYXlcIjtcclxuaW1wb3J0IHtFdmVudERhdGF9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZShcInVpL2VudW1zXCIpO1xyXG5cclxuY2xhc3MgRGFyZSBleHRlbmRzIE9ic2VydmFibGV7XHJcbiAgICBVc2VybmFtZTogc3RyaW5nO1xyXG4gICAgSWQ6IHN0cmluZztcclxuICAgIE91dHB1dERhcmU6IHN0cmluZztcclxuICAgIEZyb206IHN0cmluZztcclxuICAgIERhdGU6IERhdGU7XHJcbiAgICBTdGF0dXNPbkRhcmU6IHN0cmluZztcclxuICAgIFBvaW50czogc3RyaW5nO1xyXG4gICAgRGFyZUlzRnJvbU9yVG86IHN0cmluZztcclxuICAgIEltYWdlVG9BY2NlcHREYXJlOiBJbWFnZTtcclxuICAgIERhcmVTZXR0aW5nVG9vZ2xlOiBib29sZWFuO1xyXG4gICAgRGFyZVNldHRpbmdIaWRlOiBzdHJpbmc7XHJcblxyXG5cclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoSWQ6c3RyaW5nLCBTdGF0dXNPbkRhcmU6IHN0cmluZywgT3V0cHV0RGFyZTpzdHJpbmcsIEZyb206c3RyaW5nLCBVc2VybmFtZTpzdHJpbmcpe1xyXG4gICAgICBzdXBlcigpO1xyXG4gICAgICAgdGhpcy5JZCA9IElkO1xyXG4gICAgICAgdGhpcy5PdXRwdXREYXJlID0gT3V0cHV0RGFyZTtcclxuICAgICAgIHRoaXMuRnJvbSA9IEZyb207XHJcbiAgICAgICB0aGlzLlVzZXJuYW1lID0gVXNlcm5hbWU7XHJcbiAgICAgICB0aGlzLlN0YXR1c09uRGFyZSA9IFN0YXR1c09uRGFyZTtcclxuICAgICAgIHRoaXMuUG9pbnRzID0gXCIwUFwiO1xyXG4gICAgICAgdGhpcy5EYXJlSXNGcm9tT3JUbyA9IFwiRnJvbVwiO1xyXG4gICAgICAgdGhpcy5JbWFnZVRvQWNjZXB0RGFyZSA9IG51bGw7XHJcbiAgICAgICB0aGlzLkRhcmVTZXR0aW5nVG9vZ2xlID0gZmFsc2U7XHJcbiAgICAgICB0aGlzLkRhcmVTZXR0aW5nSGlkZSA9IFwiY29sbGFwc2VcIjtcclxuICAgICAgIHRoaXMuc2V0KFwiRGFyZVNldHRpbmdUb29nbGVcIiwgdGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSk7XHJcbiAgICB9XHJcbiAgICBTZXREYXRlKERhdGU6RGF0ZSl7XHJcbiAgICAgICAgdGhpcy5EYXRlID0gRGF0ZTtcclxuICAgIH1cclxuICAgIFNob3dEYXJlU2V0dGluZygpXHJcbiAgICB7XHJcbiAgICAgIHRoaXMuRGFyZVNldHRpbmdUb29nbGUgPSAhdGhpcy5EYXJlU2V0dGluZ1Rvb2dsZTtcclxuICAgICAgaWYodGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSlcclxuICAgICAge1xyXG4gICAgICAgICAgdGhpcy5zZXQoXCJEYXJlU2V0dGluZ0hpZGVcIiwgXCJ2aXNpYmxlXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2VcclxuICAgICAge1xyXG4gICAgICAgICAgdGhpcy5zZXQoXCJEYXJlU2V0dGluZ0hpZGVcIiwgXCJjb2xsYXBzZVwiKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNldChcIkRhcmVTZXR0aW5nVG9vZ2xlXCIsIHRoaXMuRGFyZVNldHRpbmdUb29nbGUpO1xyXG4gICAgICAgY29uc29sZS5sb2codGhpcy5EYXJlU2V0dGluZ1Rvb2dsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgQWNjZXB0RGFyZSgpe1xyXG4gICAgICAgICAgICBQYWdlLnRvcG1vc3QoKS5uYXZpZ2F0ZSh7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJQYWdlL0NhbWVyYVBhZ2UvQ2FtZXJhXCIsXHJcbiAgICAgICAgICAgICAgIGNvbnRleHQ6eyBEYXJlVG9BY2NlcHQ6IHRoaXNcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2xpZGVCb3R0b21cIixcclxuICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDM4MCxcclxuICAgICAgICAgICAgICAgICAgY3VydmU6IFwiZWFzZUluXCJcclxuICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBhbmltYXRlZDogdHJ1ZVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgRGVjbGluZURhcmUoKXtcclxuXHJcbiAgICB9XHJcbn0gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBEYXJlOyJdfQ==