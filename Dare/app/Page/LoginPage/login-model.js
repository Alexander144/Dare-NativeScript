"use strict";
var observable_1 = require("data/observable");
var Page = require("ui/frame");
var firebase = require("nativescript-plugin-firebase");
var self;
var LoginModel = (function (_super) {
    __extends(LoginModel, _super);
    function LoginModel() {
        _super.call(this);
        self = this;
        //this.set("Add", firebase.);
    }
    LoginModel.prototype.Login = function () {
        var _this = this;
        this.LoginEmail = this.get("Email");
        this.LoginPassword = this.get("Password");
        firebase.login({ type: firebase.LoginType.PASSWORD,
            email: this.LoginEmail,
            password: this.LoginPassword }).then(function (user) {
            _this.set("Username", null);
            _this.set("Email", null);
            _this.set("Password", null);
            _this.GetUsernameFromDatabase(user.uid);
        }, function (error) {
            alert("Error:" + error);
        });
    };
    LoginModel.prototype.GetUsernameFromDatabase = function (uid) {
        var user;
        var onChildEvent = function (result) {
            if (result.type === "ChildAdded") {
                if (result.value.ID == uid) {
                    Page.topmost().navigate({
                        moduleName: "Page/MainPage/Main-Page",
                        context: { Username: result.key
                        },
                        transition: {
                            name: "slideBottom",
                            duration: 380,
                            curve: "easeIn"
                        },
                        animated: true
                    });
                }
            }
        };
        // listen to changes in the /users path
        firebase.addChildEventListener(onChildEvent, "/Users");
    };
    LoginModel.prototype.SignUp = function () {
        var _this = this;
        this.LoginEmail = this.get("Email");
        this.LoginPassword = this.get("Password");
        firebase.createUser({ email: this.LoginEmail,
            password: this.LoginPassword }).then(function (user) {
            _this.set("Username", null);
            _this.set("Email", null);
            _this.set("Password", null);
            alert("Sucess");
            firebase.setValue("Users/" + _this.get("Username"), { 'ID': user.key, 'Score': 0 });
        }, function (error) {
            alert("Error: " + error);
        });
    };
    LoginModel.prototype.Send = function () {
        firebase.push("", "hello");
    };
    return LoginModel;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LoginModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMkJBQTBCLGlCQUFpQixDQUFDLENBQUE7QUFHNUMsSUFBTyxJQUFJLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFDbEMsSUFBTyxRQUFRLFdBQVcsOEJBQThCLENBQUMsQ0FBQztBQUUxRCxJQUFJLElBQUksQ0FBQztBQUNUO0lBQXlCLDhCQUFVO0lBUS9CO1FBQ0ksaUJBQU8sQ0FBQztRQUNSLElBQUksR0FBRyxJQUFJLENBQUM7UUFHWiw2QkFBNkI7SUFHakMsQ0FBQztJQUVELDBCQUFLLEdBQUw7UUFBQSxpQkFnQkM7UUFkRyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRO1lBQ2xDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVTtZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSTtZQUN0RCxLQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzQixLQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN4QixLQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzQixLQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTNDLENBQUMsRUFBQyxVQUFDLEtBQUs7WUFDSixLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELDRDQUF1QixHQUF2QixVQUF3QixHQUFVO1FBQzlCLElBQUksSUFBSSxDQUFDO1FBQ1YsSUFBSSxZQUFZLEdBQUcsVUFBUyxNQUFVO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUEsQ0FBQztvQkFDbkMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzt3QkFFcEIsVUFBVSxFQUFFLHlCQUF5Qjt3QkFDcEMsT0FBTyxFQUFDLEVBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxHQUFHO3lCQUN6Qjt3QkFDTCxVQUFVLEVBQUU7NEJBQ1IsSUFBSSxFQUFFLGFBQWE7NEJBQ25CLFFBQVEsRUFBRSxHQUFHOzRCQUNiLEtBQUssRUFBRSxRQUFRO3lCQUNqQjt3QkFDRixRQUFRLEVBQUUsSUFBSTtxQkFDYixDQUFDLENBQUM7Z0JBRUMsQ0FBQztZQUNMLENBQUM7UUFDUixDQUFDLENBQUE7UUFDRix1Q0FBdUM7UUFDdkMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0QsMkJBQU0sR0FBTjtRQUFBLGlCQWNDO1FBWkcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzVCLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFJO1lBQ3RELEtBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNCLEtBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3hCLEtBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNCLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQixRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBQyxLQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFDLEVBQUUsSUFBSSxFQUFHLElBQUksQ0FBQyxHQUFHLEVBQUMsT0FBTyxFQUFHLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDcEYsQ0FBQyxFQUFDLFVBQUMsS0FBSztZQUNKLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QseUJBQUksR0FBSjtRQUNJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFDTCxpQkFBQztBQUFELENBQUMsQUE5RUQsQ0FBeUIsdUJBQVUsR0E4RWxDO0FBRUQ7a0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0eyBPYnNlcnZhYmxlIH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlQXJyYXkgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlLWFycmF5XCI7XHJcbmltcG9ydCBMYWJlbE1vZHVsZSA9IHJlcXVpcmUoXCJ1aS9sYWJlbFwiKTtcclxuaW1wb3J0IFBhZ2UgPSByZXF1aXJlKFwidWkvZnJhbWVcIik7XHJcbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xyXG5cclxudmFyIHNlbGY7XHJcbmNsYXNzIExvZ2luTW9kZWwgZXh0ZW5kcyBPYnNlcnZhYmxle1xyXG5cclxuICAgVXNlcm5hbWU6IHN0cmluZztcclxuICAgQWRkOiBzdHJpbmc7XHJcbiAgIG1lc3NhZ2U6IE9ic2VydmFibGU7XHJcbiAgIExvZ2luRW1haWw6IHN0cmluZztcclxuICAgTG9naW5QYXNzd29yZDogc3RyaW5nOyAgIFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBzZWxmID0gdGhpcztcclxuICAgICAgICBcclxuICAgICAgIFxyXG4gICAgICAgIC8vdGhpcy5zZXQoXCJBZGRcIiwgZmlyZWJhc2UuKTtcclxuICAgICAgXHJcbiAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBMb2dpbigpe1xyXG4gICAgICAgXHJcbiAgICAgICAgdGhpcy5Mb2dpbkVtYWlsID0gdGhpcy5nZXQoXCJFbWFpbFwiKTtcclxuICAgICAgICB0aGlzLkxvZ2luUGFzc3dvcmQgPSB0aGlzLmdldChcIlBhc3N3b3JkXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZpcmViYXNlLmxvZ2luKHsgdHlwZTogZmlyZWJhc2UuTG9naW5UeXBlLlBBU1NXT1JELCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuTG9naW5FbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuTG9naW5QYXNzd29yZCB9KS50aGVuKCh1c2VyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KFwiVXNlcm5hbWVcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KFwiRW1haWxcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KFwiUGFzc3dvcmRcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuR2V0VXNlcm5hbWVGcm9tRGF0YWJhc2UodXNlci51aWQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICBhbGVydChcIkVycm9yOlwiICsgZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIEdldFVzZXJuYW1lRnJvbURhdGFiYXNlKHVpZDpzdHJpbmcpe1xyXG4gICAgICAgIHZhciB1c2VyO1xyXG4gICAgICAgdmFyIG9uQ2hpbGRFdmVudCA9IGZ1bmN0aW9uKHJlc3VsdDphbnkpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC50eXBlID09PSBcIkNoaWxkQWRkZWRcIikge1xyXG4gICAgICAgICAgICAgICAgaWYocmVzdWx0LnZhbHVlLklEID09IHVpZCl7XHJcbiAgICAgICAgUGFnZS50b3Btb3N0KCkubmF2aWdhdGUoe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJQYWdlL01haW5QYWdlL01haW4tUGFnZVwiLFxyXG4gICAgICAgICAgICAgY29udGV4dDp7VXNlcm5hbWU6IHJlc3VsdC5rZXlcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2xpZGVCb3R0b21cIixcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzODAsXHJcbiAgICAgICAgICAgICAgICBjdXJ2ZTogXCJlYXNlSW5cIlxyXG4gICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0ZWQ6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICB9XHJcbiAgICAvLyBsaXN0ZW4gdG8gY2hhbmdlcyBpbiB0aGUgL3VzZXJzIHBhdGhcclxuICAgIGZpcmViYXNlLmFkZENoaWxkRXZlbnRMaXN0ZW5lcihvbkNoaWxkRXZlbnQsIFwiL1VzZXJzXCIpO1xyXG4gICAgfVxyXG4gICAgU2lnblVwKCl7XHJcbiAgICAgICBcclxuICAgICAgICB0aGlzLkxvZ2luRW1haWwgPSB0aGlzLmdldChcIkVtYWlsXCIpO1xyXG4gICAgICAgIHRoaXMuTG9naW5QYXNzd29yZCA9IHRoaXMuZ2V0KFwiUGFzc3dvcmRcIik7XHJcbiAgICAgICAgZmlyZWJhc2UuY3JlYXRlVXNlcih7IGVtYWlsOiB0aGlzLkxvZ2luRW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLkxvZ2luUGFzc3dvcmQgfSkudGhlbigodXNlcikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldChcIlVzZXJuYW1lXCIsIG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLnNldChcIkVtYWlsXCIsIG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLnNldChcIlBhc3N3b3JkXCIsIG51bGwpO1xyXG4gICAgICAgICAgICBhbGVydChcIlN1Y2Vzc1wiKTtcclxuICAgICAgICAgICAgZmlyZWJhc2Uuc2V0VmFsdWUoXCJVc2Vycy9cIit0aGlzLmdldChcIlVzZXJuYW1lXCIpLHsgJ0lEJyA6IHVzZXIua2V5LCdTY29yZScgOiAwfSk7XHJcbiAgICAgICAgfSwoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBTZW5kKCl7XHJcbiAgICAgICAgZmlyZWJhc2UucHVzaChcIlwiLFwiaGVsbG9cIik7XHJcbiAgICB9XHJcbn0gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2dpbk1vZGVsOyJdfQ==