"use strict";
var observable_1 = require("data/observable");
var observable_array_1 = require("data/observable-array");
var firebase = require("nativescript-plugin-firebase");
var Page = require("ui/frame");
var Friend_1 = require("../Class/Friend/Friend");
var self;
var MainModel = (function (_super) {
    __extends(MainModel, _super);
    function MainModel() {
        _super.call(this);
        this.Friends = new observable_array_1.ObservableArray();
        //Vet ikke om denne fungerer
        firebase.keepInSync("/Dares", // which path in your Firebase needs to be kept in sync?
        true // set to false to disable this feature again
        ).then(function () {
            console.log("firebase.keepInSync is ON for /Dares");
        }, function (error) {
            console.log("firebase.keepInSync error: " + error);
        });
    }
    MainModel.prototype.Send = function () {
        for (var i = 0; i < this.Friends.length; i++) {
            if (this.Friends.getItem(i).SelectedFriend === true) {
                this.Friends.getItem(i).Send(this.Dare);
            }
        }
        Page.topmost().goBack();
    };
    MainModel.prototype.SetApplication = function (Username, Dare) {
        self = this;
        this.User = Username;
        this.Dare = Dare;
        this.set("SUser", this.User);
        if (this.SetFriends(this.User)) {
            this.Friends.push(new Friend_1.default(this.User, this.User, true));
        }
        this.GetFriends();
    };
    MainModel.prototype.GetFriends = function () {
        var onChildEvent = function (result) {
            if (result.type === "ChildAdded") {
                if (self.SetFriends(result.key) == true) {
                    self.AddFriendsToList(result.key);
                }
            }
            if (result.type === "ChildRemoved") {
                self.DeleteFriend(result.key);
            }
        };
        console.log("User" + this.User);
        var pathToFriends = "/Users/" + this.User + "/Friends/Accept";
        firebase.addChildEventListener(onChildEvent, pathToFriends);
    };
    MainModel.prototype.SetFriends = function (AFriend) {
        var AddFriend = true;
        //Kan bytte til .indexof. SÃ¸ker igjennom array hvor elemente du vl ha ligger
        for (var i = 0; i < this.Friends.length; i++) {
            if (this.Friends.getItem(i).FriendsUsername === AFriend) {
                AddFriend = false;
            }
        }
        return AddFriend;
    };
    MainModel.prototype.AddFriendsToList = function (AFriend) {
        this.Friends.push(new Friend_1.default(this.User, AFriend, true));
        console.log("Key:" + AFriend);
    };
    MainModel.prototype.GoBack = function () {
        while (this.Friends.length > 0) {
            this.Friends.pop();
        }
        Page.topmost().goBack();
    };
    return MainModel;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MainModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VuZFRvLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VuZFRvLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyQkFBMEIsaUJBQWlCLENBQUMsQ0FBQTtBQUM1QyxpQ0FBZ0MsdUJBQXVCLENBQUMsQ0FBQTtBQUN4RCxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBSTFELElBQU8sSUFBSSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBRWxDLHVCQUFtQix3QkFBd0IsQ0FBQyxDQUFBO0FBRTNDLElBQUksSUFBSSxDQUFDO0FBQ1Y7SUFBd0IsNkJBQVU7SUFPOUI7UUFDSSxpQkFBTyxDQUFDO1FBQ1AsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGtDQUFlLEVBQVUsQ0FBQztRQUM5Qyw0QkFBNEI7UUFDMUIsUUFBUSxDQUFDLFVBQVUsQ0FDaEIsUUFBUSxFQUFFLHdEQUF3RDtRQUNsRSxJQUFJLENBQU0sNkNBQTZDO1NBQ3ZELENBQUMsSUFBSSxDQUNOO1lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1FBQ3hELENBQUMsRUFDRCxVQUFDLEtBQUs7WUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRVgsQ0FBQztJQUVHLHdCQUFJLEdBQUo7UUFDSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElB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UUFDdkIsQ0FBQztRQUNBLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUwsZ0JBQUM7QUFBRCxDQUFDLEFBakZELENBQXdCLHVCQUFVLEdBaUZqQztBQUVEO2tCQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IE9ic2VydmFibGVBcnJheSB9IGZyb20gXCJkYXRhL29ic2VydmFibGUtYXJyYXlcIjtcbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuaW1wb3J0IGxpc3RQaWNrZXJNb2R1bGUgPSByZXF1aXJlKFwidWkvbGlzdC1waWNrZXJcIik7XG5pbXBvcnQge0V2ZW50RGF0YX0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xuXG5pbXBvcnQgUGFnZSA9IHJlcXVpcmUoXCJ1aS9mcmFtZVwiKTtcbmltcG9ydCBEYXJlIGZyb20gXCIuLi9DbGFzcy9EYXJlL0RhcmVcIjtcbmltcG9ydCBGcmllbmQgZnJvbSBcIi4uL0NsYXNzL0ZyaWVuZC9GcmllbmRcIjtcblxuIHZhciBzZWxmO1xuY2xhc3MgTWFpbk1vZGVsIGV4dGVuZHMgT2JzZXJ2YWJsZXtcbiAgICBVc2VyOiBzdHJpbmc7XG4gICAgRGFyZTogc3RyaW5nO1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgRnJpZW5kczogT2JzZXJ2YWJsZUFycmF5PEZyaWVuZD47XG4gIFxuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgIHRoaXMuRnJpZW5kcyA9IG5ldyBPYnNlcnZhYmxlQXJyYXk8RnJpZW5kPigpO1xuICAgICAgICAvL1ZldCBpa2tlIG9tIGRlbm5lIGZ1bmdlcmVyXG4gICAgICAgICAgZmlyZWJhc2Uua2VlcEluU3luYyhcbiAgICAgICAgICAgICBcIi9EYXJlc1wiLCAvLyB3aGljaCBwYXRoIGluIHlvdXIgRmlyZWJhc2UgbmVlZHMgdG8gYmUga2VwdCBpbiBzeW5jP1xuICAgICAgICAgICAgIHRydWUgICAgICAvLyBzZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzIGZlYXR1cmUgYWdhaW5cbiAgICAgICAgICAgICkudGhlbihcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpcmViYXNlLmtlZXBJblN5bmMgaXMgT04gZm9yIC9EYXJlc1wiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmlyZWJhc2Uua2VlcEluU3luYyBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBcbn1cblxuICAgIFNlbmQoKXtcbiAgICAgICAgIGZvciAodmFyIGk9MDtpPHRoaXMuRnJpZW5kcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5GcmllbmRzLmdldEl0ZW0oaSkuU2VsZWN0ZWRGcmllbmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLkZyaWVuZHMuZ2V0SXRlbShpKS5TZW5kKHRoaXMuRGFyZSk7XG4gICAgICAgICAgICAgfSAgIFxuICAgICAgICB9XG4gICAgICAgIFBhZ2UudG9wbW9zdCgpLmdvQmFjaygpO1xuICAgIH1cblxuICAgIFNldEFwcGxpY2F0aW9uKFVzZXJuYW1lOnN0cmluZywgRGFyZTpzdHJpbmcpe1xuICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5Vc2VyID0gVXNlcm5hbWU7XG4gICAgICAgIHRoaXMuRGFyZSA9IERhcmU7XG4gICAgICAgIHRoaXMuc2V0KFwiU1VzZXJcIix0aGlzLlVzZXIpO1xuICAgICAgICBpZih0aGlzLlNldEZyaWVuZHModGhpcy5Vc2VyKSl7XG4gICAgICAgICAgICB0aGlzLkZyaWVuZHMucHVzaChuZXcgRnJpZW5kKHRoaXMuVXNlcix0aGlzLlVzZXIsdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuR2V0RnJpZW5kcygpO1xuICAgIH1cbiAgICBHZXRGcmllbmRzKCl7XG4gICAgICAgICAgIHZhciBvbkNoaWxkRXZlbnQgPSBmdW5jdGlvbihyZXN1bHQ6YW55KSB7XG4gICAgICAgICAgICAgaWYocmVzdWx0LnR5cGUgPT09IFwiQ2hpbGRBZGRlZFwiKXtcbiAgICAgICAgICAgICAgICAgaWYoc2VsZi5TZXRGcmllbmRzKHJlc3VsdC5rZXkpID09IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICBzZWxmLkFkZEZyaWVuZHNUb0xpc3QocmVzdWx0LmtleSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKHJlc3VsdC50eXBlID09PSBcIkNoaWxkUmVtb3ZlZFwiKXtcbiAgICAgICAgICAgICAgICAgIHNlbGYuRGVsZXRlRnJpZW5kKHJlc3VsdC5rZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhcIlVzZXJcIiArIHRoaXMuVXNlcik7XG4gICAgICAgIGxldCBwYXRoVG9GcmllbmRzID0gXCIvVXNlcnMvXCIrdGhpcy5Vc2VyICsgXCIvRnJpZW5kcy9BY2NlcHRcIjtcbiAgICAgICAgZmlyZWJhc2UuYWRkQ2hpbGRFdmVudExpc3RlbmVyKG9uQ2hpbGRFdmVudCxwYXRoVG9GcmllbmRzKTtcbiAgICB9XG4gICAgU2V0RnJpZW5kcyhBRnJpZW5kOiBzdHJpbmcpe1xuICAgIHZhciBBZGRGcmllbmQgPSB0cnVlO1xuICAgIC8vS2FuIGJ5dHRlIHRpbCAuaW5kZXhvZi4gU8O4a2VyIGlnamVubm9tIGFycmF5IGh2b3IgZWxlbWVudGUgZHUgdmwgaGEgbGlnZ2VyXG4gICAgZm9yICh2YXIgaT0wO2k8dGhpcy5GcmllbmRzLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLkZyaWVuZHMuZ2V0SXRlbShpKS5GcmllbmRzVXNlcm5hbWUgPT09IEFGcmllbmQpIHtcbiAgICAgICAgICAgICAgICBBZGRGcmllbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICB9ICAgXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFkZEZyaWVuZDtcbiAgICB9XG4gICAgQWRkRnJpZW5kc1RvTGlzdChBRnJpZW5kOnN0cmluZyl7XG4gICAgICAgIHRoaXMuRnJpZW5kcy5wdXNoKG5ldyBGcmllbmQodGhpcy5Vc2VyLEFGcmllbmQsdHJ1ZSkpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIktleTpcIiArIEFGcmllbmQpO1xuICAgIH1cblxuICBcbiAgIEdvQmFjaygpe1xuICAgICAgICAgd2hpbGUodGhpcy5GcmllbmRzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgdGhpcy5GcmllbmRzLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgICBQYWdlLnRvcG1vc3QoKS5nb0JhY2soKTtcbiAgICB9XG4gIFxufSBcblxuZXhwb3J0IGRlZmF1bHQgTWFpbk1vZGVsOyJdfQ==