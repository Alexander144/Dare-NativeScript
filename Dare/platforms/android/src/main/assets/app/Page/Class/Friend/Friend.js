"use strict";
var firebase = require("nativescript-plugin-firebase");
var observable_1 = require("data/observable");
var Friend = (function (_super) {
    __extends(Friend, _super);
    function Friend(Username, FriendsUsername, AreFriends) {
        _super.call(this);
        this.Username = Username;
        this.FriendsUsername = FriendsUsername;
        this.AreFriends = AreFriends;
        this.SelectedFriend = false;
        this.Color = "red";
    }
    Friend.prototype.Select = function () {
        this.SelectedFriend = !this.SelectedFriend;
        if (this.SelectedFriend == true) {
            this.set("Color", "green");
        }
        else {
            //Samme her
            this.set("Color", "red");
        }
    };
    Friend.prototype.SendRequest = function () {
        var OUsername = {};
        OUsername[this.Username] = false;
        firebase.setValue("Users/" + this.FriendsUsername + "/Friends/Request/", OUsername);
        alert("Send friend request to " + this.FriendsUsername);
    };
    Friend.prototype.SetDate = function (Date) {
        this.Date = Date;
    };
    Friend.prototype.AcceptFriendRequest = function () {
        var OUsername = {};
        OUsername[this.Username] = true;
        var FUsername = {};
        FUsername[this.FriendsUsername] = true;
        firebase.setValue("Users/" + this.Username + "/Friends/Accept/", FUsername);
        firebase.setValue("Users/" + this.FriendsUsername + "/Friends/Accept/", OUsername);
        firebase.remove("Users/" + this.Username + "/Friends/Request/" + this.FriendsUsername);
    };
    Friend.prototype.Delete = function () {
        firebase.remove("Users/" + this.Username + "/Friends/Accept/" + this.FriendsUsername);
        firebase.remove("Users/" + this.FriendsUsername + "/Friends/Accept/" + this.Username);
    };
    Friend.prototype.Send = function (InputDare) {
        firebase.push("Dares/" + this.FriendsUsername, { 'From': this.Username, 'Dare': InputDare });
        this.SelectedFriend = false;
        this.set("Color", "red");
    };
    return Friend;
}(observable_1.Observable));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Friend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnJpZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRnJpZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBQzFELDJCQUEwQixpQkFBaUIsQ0FBQyxDQUFBO0FBQzVDO0lBQXFCLDBCQUFVO0lBUTNCLGdCQUFZLFFBQWUsRUFBRSxlQUFzQixFQUFFLFVBQW1CO1FBQ3BFLGlCQUFPLENBQUM7UUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUU1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsdUJBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxjQUFjLEdBQUUsQ0FBRSxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzVDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztZQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvQixDQUFDO1FBQ0QsSUFBSSxDQUFBLENBQUM7WUFDRCxXQUFXO1lBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsQ0FBQztJQUNKLENBQUM7SUFFRCw0QkFBVyxHQUFYO1FBQ0ksSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxlQUFlLEdBQUMsbUJBQW1CLEVBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0UsS0FBSyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsd0JBQU8sR0FBUCxVQUFRLElBQVM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsb0NBQW1CLEdBQW5CO1FBQ0ksSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxlQUFlLEdBQUMsa0JBQWtCLEVBQUcsU0FBUyxDQUFDLENBQUM7UUFDaEYsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxtQkFBbUIsR0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELHVCQUFNLEdBQU47UUFDSSxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRixRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsZUFBZSxHQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBR0QscUJBQUksR0FBSixVQUFLLFNBQVM7UUFDVCxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsZUFBZSxFQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNMLGFBQUM7QUFBRCxDQUFDLEFBOURELENBQXFCLHVCQUFVLEdBOEQ5QjtBQUVEO2tCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuaW1wb3J0eyBPYnNlcnZhYmxlIH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xuY2xhc3MgRnJpZW5kIGV4dGVuZHMgT2JzZXJ2YWJsZXtcbiAgICBVc2VybmFtZTogc3RyaW5nO1xuICAgIEZyaWVuZHNVc2VybmFtZTogc3RyaW5nO1xuICAgIEFyZUZyaWVuZHM6IGJvb2xlYW47XG4gICAgU2VsZWN0ZWRGcmllbmQ6Ym9vbGVhbjtcbiAgICBEYXRlOiBEYXRlO1xuICAgIENvbG9yOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihVc2VybmFtZTpzdHJpbmcsIEZyaWVuZHNVc2VybmFtZTpzdHJpbmcsIEFyZUZyaWVuZHM6IGJvb2xlYW4pe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgIHRoaXMuVXNlcm5hbWUgPSBVc2VybmFtZTtcbiAgICAgICB0aGlzLkZyaWVuZHNVc2VybmFtZSA9IEZyaWVuZHNVc2VybmFtZTtcbiAgICAgICB0aGlzLkFyZUZyaWVuZHMgPSBBcmVGcmllbmRzO1xuICAgICAgIHRoaXMuU2VsZWN0ZWRGcmllbmQgPSBmYWxzZTtcbiAgICAgICBcbiAgICAgICB0aGlzLkNvbG9yID0gXCJyZWRcIjtcbiAgICB9XG5cbiAgICBTZWxlY3QoKXtcbiAgICAgICAgdGhpcy5TZWxlY3RlZEZyaWVuZCA9ISB0aGlzLlNlbGVjdGVkRnJpZW5kO1xuICAgICAgIGlmKHRoaXMuU2VsZWN0ZWRGcmllbmQgPT0gdHJ1ZSl7XG4gICAgICAgICAgIHRoaXMuc2V0KFwiQ29sb3JcIiwgXCJncmVlblwiKTtcbiAgICAgICAgICAgLy9HasO4ciBvbSB0aWwgZW4gYW5uZW4gZmFyZ2VcbiAgICAgICB9XG4gICAgICAgZWxzZXtcbiAgICAgICAgICAgLy9TYW1tZSBoZXJcbiAgICAgICAgICAgdGhpcy5zZXQoXCJDb2xvclwiLCBcInJlZFwiKTtcbiAgICAgICB9XG4gICAgfVxuXG4gICAgU2VuZFJlcXVlc3QoKXtcbiAgICAgICAgdmFyIE9Vc2VybmFtZSA9IHt9O1xuICAgICAgICBPVXNlcm5hbWVbdGhpcy5Vc2VybmFtZV0gPSBmYWxzZTtcbiAgICAgICAgIGZpcmViYXNlLnNldFZhbHVlKFwiVXNlcnMvXCIrdGhpcy5GcmllbmRzVXNlcm5hbWUrXCIvRnJpZW5kcy9SZXF1ZXN0L1wiLE9Vc2VybmFtZSk7XG4gICAgICAgICBhbGVydChcIlNlbmQgZnJpZW5kIHJlcXVlc3QgdG8gXCIgKyB0aGlzLkZyaWVuZHNVc2VybmFtZSk7XG4gICAgfVxuXG4gICAgU2V0RGF0ZShEYXRlOkRhdGUpe1xuICAgICAgICB0aGlzLkRhdGUgPSBEYXRlO1xuICAgIH1cblxuICAgIEFjY2VwdEZyaWVuZFJlcXVlc3QoKXtcbiAgICAgICAgdmFyIE9Vc2VybmFtZSA9IHt9O1xuICAgICAgICBPVXNlcm5hbWVbdGhpcy5Vc2VybmFtZV0gPSB0cnVlO1xuICAgICAgICB2YXIgRlVzZXJuYW1lID0ge307XG4gICAgICAgIEZVc2VybmFtZVt0aGlzLkZyaWVuZHNVc2VybmFtZV0gPSB0cnVlO1xuICAgICAgICAgZmlyZWJhc2Uuc2V0VmFsdWUoXCJVc2Vycy9cIit0aGlzLlVzZXJuYW1lK1wiL0ZyaWVuZHMvQWNjZXB0L1wiLCBGVXNlcm5hbWUpO1xuICAgICAgICAgZmlyZWJhc2Uuc2V0VmFsdWUoXCJVc2Vycy9cIit0aGlzLkZyaWVuZHNVc2VybmFtZStcIi9GcmllbmRzL0FjY2VwdC9cIiwgIE9Vc2VybmFtZSk7XG4gICAgICAgICBmaXJlYmFzZS5yZW1vdmUoXCJVc2Vycy9cIit0aGlzLlVzZXJuYW1lK1wiL0ZyaWVuZHMvUmVxdWVzdC9cIit0aGlzLkZyaWVuZHNVc2VybmFtZSk7XG4gICAgfVxuXG4gICAgRGVsZXRlKCl7XG4gICAgICAgIGZpcmViYXNlLnJlbW92ZShcIlVzZXJzL1wiK3RoaXMuVXNlcm5hbWUrXCIvRnJpZW5kcy9BY2NlcHQvXCIrdGhpcy5GcmllbmRzVXNlcm5hbWUpO1xuICAgICAgICBmaXJlYmFzZS5yZW1vdmUoXCJVc2Vycy9cIit0aGlzLkZyaWVuZHNVc2VybmFtZStcIi9GcmllbmRzL0FjY2VwdC9cIit0aGlzLlVzZXJuYW1lKTtcbiAgICB9XG4gICAgXG4gICBcbiAgICBTZW5kKElucHV0RGFyZSl7XG4gICAgICAgICBmaXJlYmFzZS5wdXNoKFwiRGFyZXMvXCIrdGhpcy5GcmllbmRzVXNlcm5hbWUseydGcm9tJzogdGhpcy5Vc2VybmFtZSwgJ0RhcmUnOklucHV0RGFyZX0pO1xuICAgICAgICAgdGhpcy5TZWxlY3RlZEZyaWVuZCA9IGZhbHNlO1xuICAgICAgICAgdGhpcy5zZXQoXCJDb2xvclwiLCBcInJlZFwiKTtcbiAgICB9XG59IFxuXG5leHBvcnQgZGVmYXVsdCBGcmllbmQ7Il19